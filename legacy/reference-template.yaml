AWSTemplateFormatVersion: '2010-09-09'
Description: Creates AWS Facilitator/ admin role and policy

Parameters:
  awsAccountNumber:
    Type: 'String'
  environmentName:
    Type: String
  KMSPolicyARN:
    Type: String
  CloudTrailpolicyARN:
    Type: String
  DenyPolicyARN:
    Type: String
  SupportPolicyARN:
    Type: String
  PermissionsBoundaryPolicyARN:
    Type: String

Resources:
  GDCWintelFacilitatorRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Federated: !Join [ '', ['arn:aws:iam::', !Ref awsAccountNumber ,':saml-provider/iam.company.com' ]]
            Action: [ 'sts:AssumeRoleWithSAML' ]
            Condition:
              StringEquals:
                SAML:aud: [ 'https://signin.aws.amazon.com/saml' ]
          - Effect: 'Allow'
            Principal:
              AWS: arn:aws:iam::111111111111:role/prefix-gdcwintel-prod-jenkins-role
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - !Ref GDCWintelFacilitatorPolicy
        - !Ref KMSPolicyARN
        - !Ref CloudTrailpolicyARN
        - !Ref DenyPolicyARN
        - !Ref SupportPolicyARN
        - arn:aws:iam::aws:policy/AWSImageBuilderFullAccess
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
      RoleName: !Sub domain-${environmentName}-gdcwintel-facilitator-role
      PermissionsBoundary: !Ref PermissionsBoundaryPolicyARN

  GDCWintelFacilitatorPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub prefix-${environmentName}-gdcwintel-facilitator-policy
      Description: 'Policy with actions for GDC Wintel Facilitator Role'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Resource: '*'
            Action:
              - cloudformation:Describe*
              ...
              - es:*"

  ICASSupportRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Federated: !Join [ '', ['arn:aws:iam::', !Ref awsAccountNumber ,':saml-provider/iam.company.com' ]]
            Action: [ 'sts:AssumeRoleWithSAML' ]
            Condition:
              StringEquals:
                SAML:aud: [ 'https://signin.aws.amazon.com/saml' ]
      ManagedPolicyArns:
        - !Ref ICASSupportPolicy
        - !Ref ICASDenyPolicy
        - !Ref KMSPolicyARN
        - arn:aws:iam::aws:policy/job-function/SupportUser
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/ServiceQuotasFullAccess
        - arn:aws:iam::aws:policy/AWSBackupFullAccess
      PermissionsBoundary: !Ref PermissionsBoundaryPolicyARN
      RoleName: !Sub domain-${environmentName}-icas-support-role

  ICASSupportPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub prefix-${environmentName}-icas-support-policy
      Description: 'Policy with actions for ICAS Support Role'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Resource: '*'
            Action:
              - acm:DescribeCertificate
              ...
              - trustedadvisor:*
          - Effect: 'Allow'
            Resource: '*'
            Action:
              - iam:AttachRolePolicy
            Condition:
              ArnEquals:
                iam:PolicyARN: 'arn:aws:iam::*:policy/prefix-prod-kms-usage-policy'
          - Effect: 'Allow'
            Resource: '*'
            Action:
              - sts:DecodeAuthorizationMessage

  ICASDenyPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: 'prefix-icas-deny-policy'
      Description: 'Policy with actions for ICAS Deny Role'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Deny'
            Resource: '*'
            Action:
              - ec2:AcceptVpcPeeringConnection
              ...
              - ec2:ModifyReservedInstances
          - Effect: 'Deny'
            Resource: '*'
            Action:
              - cloudformation:*
              ...
              - cloudtrail:DescribeTrails
            Condition:
              StringNotEquals:
                aws:RequestedRegion:
                  - us-east-2
                  - eu-central-1
                  - ap-southeast-1
                  - ca-central-1

  LinuxAdminRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Federated: !Join [ '', ['arn:aws:iam::', !Ref awsAccountNumber ,':saml-provider/iam.company.com' ]]
            Action: [ 'sts:AssumeRoleWithSAML' ]
            Condition:
              StringEquals:
                SAML:aud: [ 'https://signin.aws.amazon.com/saml' ]
          - Effect: 'Allow'
            Principal:
              AWS: arn:aws:iam::111111111111:role/prefix-linux-prod-jenkins-role
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - !Ref LinuxAdminPolicy
        - !Ref KMSPolicyARN
        - !Ref CloudTrailpolicyARN
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      RoleName: 'domain-linux-admin-role'

  LinuxAdminPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: 'prefix-linux-admin-policy'
      Description: 'Policy with actions for Linux Admin Role'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Resource: '*'
            Action:
              - iam:GetPolicyVersion
              ...
              - cloudformation:Get*
          - Effect: 'Allow'
            Resource:
              - arn:aws:iam::*:role/service-role/*
              - arn:aws:iam::*:policy/service-role/*
            Action:
              - iam:CreatePolicy
              ...
              - iam:AttachRolePolicy
          - Effect: 'Allow'
            Resource: '*'
            Action:
              - iam:CreateServiceLinkedRole
            Condition:
              StringEquals:
                iam:AWSServiceName: 'storagegateway.amazonaws.com'
          - Effect: 'Allow'
            Resource: 'arn:aws:ec2:*:*:instance/*'
            Action:
              - ec2-instance-connect:SendSerialConsoleSSHPublicKey

  GDCCDPFacilitatorRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Federated: !Join [ '', ['arn:aws:iam::', !Ref awsAccountNumber ,':saml-provider/iam.company.com' ]]
            Action: [ 'sts:AssumeRoleWithSAML' ]
            Condition:
              StringEquals:
                SAML:aud: [ 'https://signin.aws.amazon.com/saml' ]
      ManagedPolicyArns:
        - !Ref GDCCDPFacilitatorPolicy
        - !Ref KMSPolicyARN
        - !Ref CloudTrailpolicyARN
        - !Ref DenyPolicyARN
        - !Ref SupportPolicyARN
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      PermissionsBoundary: !Ref PermissionsBoundaryPolicyARN
      RoleName: !Sub domain-${environmentName}-gdccdp-facilitator-role

  GDCCDPFacilitatorPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub prefix-${environmentName}-gdccdp-facilitator-policy
      Description: 'Policy with actions for GDCCDP Facilitator Role'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Resource: '*'
            Action:
              - iam:ListRoleTags
              ...
              - aws-marketplace:ListAgreementRequests

  ICASEnvFacilitatorRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Federated: !Join [ '', ['arn:aws:iam::', !Ref awsAccountNumber ,':saml-provider/iam.company.com' ]]
            Action: [ 'sts:AssumeRoleWithSAML' ]
            Condition:
              StringEquals:
                SAML:aud: [ 'https://signin.aws.amazon.com/saml' ]
          - Effect: 'Allow'
            Principal:
              AWS: 'arn:aws:iam::111111111111:role/prefix-cse-prod-jenkins-role'
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - !Ref ICASEnvFacilitatorPolicy
        - !Ref ServiceCatalogEndAdminPolicy
        - !Ref KMSPolicyARN
        - !Ref DenyPolicyARN
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      PermissionsBoundary: !Ref PermissionsBoundaryPolicyARN
      RoleName: !Sub domain-${environmentName}-icas-facilitator-role

  ICASEnvFacilitatorPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub prefix-${environmentName}-icas-facilitator-policy
      Description: 'Policy with actions for ICAS Facilitator Role'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Resource: '*'
            Action:
              - lambda:*
              ...
              - iam:ListRoleTags

  ServiceCatalogEndAdminPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: 'prefix-servicecatalog-endadmin-policy'
      Description: 'Policy with actions for Service Catalog End Admins'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Resource: '*'
            Action:
              - cloudformation:GetTemplateSummary
              ...
              - cloudformation:*
          - Effect: 'Allow'
            Resource: '*'
            Action:
              - servicecatalog:DescribeProduct
              ...
              - servicecatalog:ListServiceActionsForProvisioningArtifact
            Condition:
              StringEquals:
                servicecatalog:accountLevel: 'self'
          - Effect: 'Allow'
            Resource: '*'
            Action:
              - servicecatalog:DescribeProduct
              ...
              - servicecatalog:UpdateProvisionedProduct
            Condition:
              StringEquals:
                servicecatalog:roleLevel: 'self'

  ICASFacilitatorRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Federated: !Join [ '', ['arn:aws:iam::', !Ref awsAccountNumber ,':saml-provider/iam.company.com' ]]
            Action: [ 'sts:AssumeRoleWithSAML' ]
            Condition:
              StringEquals:
                SAML:aud: [ 'https://signin.aws.amazon.com/saml' ]
          - Effect: 'Allow'
            Principal:
              AWS: 'arn:aws:iam::111111111111:role/domain-icas-facilitator-role'
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - !Ref ICASFacilitatorPolicy
        - !Ref ServiceCatalogEndAdminPolicy
        - !Ref KMSPolicyARN
        - !Ref DenyPolicyARN
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      PermissionsBoundary: !Ref PermissionsBoundaryPolicyARN
      RoleName: 'domain-icas-facilitator-role'

  ICASFacilitatorPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: 'domain-icas-facilitator-policy'
      Description: 'Policy with actions for ICAS Facilitator Role'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Resource: '*'
            Action:
              - acm:DescribeCertificate
              ...
              - elasticloadbalancingv2:*

  domainAdminRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              AWS: 'arn:aws:iam::111111111111:role/domain-admin-role'
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/PowerUserAccess
      RoleName: 'domain-admin-role'

Outputs:
  prefixAdminName:
    Description: 'Security Admin Role Name'
    Value: 'domain-admin-role'
    Export:
      Name: !Sub "${AWS::StackName}-prefixAdminName"
