#!/usr/bin/env bash

: <<<'DOCUMENTATION'
Name: simulate-role-permissions.shell
Objective: Run aws iam simulate-principal-policy for a role with permissions boundary attached against all Allow actions found in the role attached managed policies.

Note:
  - Uses ResourceArn="*" (quick check). Some actions may need specific ARNs; those will show as ImplicitDeny.
  - API limit: 100 ActionNames per call. Script batches automatically.

Dependencies: awscli v2, jq
Usage: simulate-role-permissions network-architecture-role

Warning: Single script to simulate the role’s effective permissions by combining managed policy + permissions boundary and fail if anything is not allowed.
DOCUMENTATION

set -euo pipefail;

function simulate_role_permissions () {
  # Args
  local role_name="$1";

  # Locals
  local role_arn=""; local tmpdir=""; local actions_file=""; local total=0; local batch_size=100;
  local allowed_total=0; local denied_total=0;

  # Resolve role ARN
  role_arn="$(aws iam get-role --role-name "${role_name}" --query 'Role.Arn' --output text)";
  tmpdir="$(mktemp -d)"; actions_file="${tmpdir}/actions.txt";

  # Collect Allow actions from all attached managed policies
  aws iam list-attached-role-policies --role-name "${role_name}" \
    --query 'AttachedPolicies[].PolicyArn' --output text \
    | tr '\t' '\n' | while read -r pol_arn; do
        [[ -z "${pol_arn}" ]] && continue;
        local ver=""; ver="$(aws iam get-policy --policy-arn "${pol_arn}" --query 'Policy.DefaultVersionId' --output text)";
        aws iam get-policy-version --policy-arn "${pol_arn}" --version-id "${ver}" \
          --query 'PolicyVersion.Document' --output json > "${tmpdir}/doc.json";
        jq -r '
          .Statement
          | (type=="array" ? . : [.] )
          | map(select(.Effect=="Allow"))
          | map(.Action)
          | map( (type=="array")? . : [.] )
          | add
          | map(tostring)
          | .[]
        ' "${tmpdir}/doc.json";
      done | sort -u > "${actions_file}";

  total="$(wc -l < "${actions_file}" | tr -d ' ')";

  echo -e "Role: ${role_name}";
  echo -e "Role ARN: ${role_arn}";
  echo -e "Collected Allow actions from attached managed policies: ${total}";

  # Batch simulate (100 actions per call)
  mapfile -t ACTIONS < "${actions_file}";
  for (( i=0; i<${#ACTIONS[@]}; i+=batch_size )); do
    local chunk=( "${ACTIONS[@]:i:batch_size}" );

    # shellcheck disable=SC2086
    aws iam simulate-principal-policy \
      --policy-source-arn "${role_arn}" \
      --action-names "${chunk[@]}" \
      --resource-arns "*" \
      --output json > "${tmpdir}/sim.json";

    # Tally results
    local allowed=0; local denied=0;
    allowed="$(jq '[.EvaluationResults[] | select(.EvalDecision=="allowed")] | length' "${tmpdir}/sim.json")";
    denied="$(jq '[.EvaluationResults[] | select(.EvalDecision!="allowed")] | length' "${tmpdir}/sim.json")";

    allowed_total=$((allowed_total + allowed));
    denied_total=$((denied_total + denied));

    # Print any not-allowed items (implicit or explicit deny)
    jq -r '
      .EvaluationResults[]
      | select(.EvalDecision!="allowed")
      | "\(.EvalActionName): \(.EvalDecision)"
    ' "${tmpdir}/sim.json" | sed 's/^/NOT-ALLOWED: /';
  done;

  echo -e "Allowed: ${allowed_total} / ${total}";
  echo -e "Not allowed (implicit/explicit): ${denied_total}";

  if [[ ${denied_total} -gt 0 ]]; then
    echo -e "Result: FAIL — some actions are not permitted by the role’s effective permissions (boundary or other factors).";
    rm -rf "${tmpdir}"; return 1;
  else
    echo -e "Result: OK — all actions allowed under current role + boundary.";
    rm -rf "${tmpdir}"; return 0;
  fi;
}; alias simulate-role-permissions='simulate_role_permissions';
